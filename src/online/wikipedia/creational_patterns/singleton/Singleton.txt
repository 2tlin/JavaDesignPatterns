https://en.wikipedia.org/wiki/Singleton_pattern

In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one "single" instance.
This is useful when exactly one object is needed to coordinate actions across the system.

The singleton design pattern solves problems by allowing it to:[2]

1. Ensure that a class only has one instance
2. Easily access the sole instance of a class
3. Control its instantiation
4. Restrict the number of instances
5. Access a global variable

The singleton design pattern describes how to solve such problems:

1. Hide the constructors of the class.
2. Define a public static operation (getInstance()) that returns the sole instance of the class.

In essence, the singleton pattern forces it to be responsible for ensuring that it is only instantiated once.
A hidden constructor—declared private or protected—ensures that the class can never be instantiated from outside the class.
The public static operation can be accessed by using the class name and operation name, e.g., Singleton.getInstance().

Common uses
1. The abstract factory, factory method, builder, and prototype patterns can use singletons.
2. Facade objects are often singletons because only one facade object is required.
3. State objects are often singletons.
4. Logging is a classic example of a singleton.

Singletons are often preferred to global variables because:
1. They do not pollute the global namespace (or, in languages with nested namespaces, their containing namespace) with unnecessary variables.[1]
2. They permit lazy allocation and initialization, whereas global variables in many languages will always consume resources.

Critics
consider the singleton to be an anti-pattern in that it is frequently used in scenarios where it is not beneficial
because it often introduces unnecessary restrictions in situations where a singleton class would not be beneficial,
thereby introducing global state into an application.[5][6][7][8]

Furthermore, because a singleton can be accessed anywhere[dubious – discuss] by anything without having to use any parameters[dubious – discuss],
any dependencies would not be immediately visible to developers. Consequently, developers would need to know "the inner workings of code to properly use it"[dubious – discuss].[9]

Singletons also violate the single-responsibility principle,[5] because not only are they responsible for the singleton's normal task,
it must also ensure that only one is instantiated; note that this relies on a "classic" singleton definition where it is responsible for enforcing its own uniqueness through,
for example, a static getInstance() method.

Another drawback is that singletons are difficult to test[dubious – discuss] because they carry global state for the duration of the program[dubious – discuss].
Specifically, because unit testing requires loosely coupled classes in order to isolate what's being tested.[5] Additionally,
when a certain class interacts with a singleton, that class and the singleton become tightly coupled[dubious – discuss],
making it impossible to test the class on its own without also testing the singleton[dubious – discuss].[9]