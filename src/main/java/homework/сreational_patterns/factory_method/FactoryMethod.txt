Фабричный метод — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе,
позволяя подклассам изменять тип создаваемых объектов.

Фабричный метод — паттерн, порождающий классы.

Назначение
Определяет интерфейс для создания объекта, но оставляет подклассам решение о том, экземпляры какого класса должны создаваться.
Фабричный метод позволяет классу делегировать создание экземпляров подклассам.

Применимость
Основные условия для применения паттерна фабричный метод:

1) Классу заранее неизвестно, объекты каких классов ему нужно создавать;
2) Класс спроектирован так, чтобы объекты, которые он создает, определялись подклассами;
3) Класс делегирует свои обязанности одному из нескольких вспомогательных подклассов,
и вам нужно локализовать информацию о том, какой класс принимает эти обязанности на себя.

Общая идеология:
Логику создания конкретных классов ConcreteProduct через конструктор выделяем в отдельную логику создания
с использованием фабричного метода, реализуемого иерархией классов ConcreteCreator

Структура:
1) Иерархия классов во главе с интерфейсом Product, определяющим интерфейс объектов, создаваемых фабричным методом:
public interface Product {
    void methodOne4product();
    void methodTwo4product();
}
и его реализации ConcreteProduct с реализацией методов интерфейса для различных бизнес- процессов:
public class ConcreteProduct1 extends Product {

    @Override
    public void methodOne4product() {
        // product 1 business logic
    }

    @Override
    public void methodTwo4product() {
        // product 2 business logic
    }
}

2) Иерархия классов  во главе с абстрактным классом Creator с абстрактным фабричным методом create(), возвращающий тип Product:
public abstract class Creator {
    /**
     * Подклассы будут переопределять этот метод, чтобы создавать конкретные
     * объекты продуктов, разные для каждой фабрики.
     */
    public abstract Product create();
}
и подклассы ConcreteCreator, реализующих абстрактный метод create(), возвращающего экземляр конкретного класса ConcreteProduct:
public class ConcreteCreator extends Creator {
    @Override
    public Button create() {
        return new ConcreteCreator();
    }
}
3) Приложение, в котором выбор того, какой экземпляр класса будет создаваться, зависит от выбора клиента:

public class Demo {
    private static Creator creator;

    public static void main(String[] args) {
        configure();
        runBusinessLogic();
    }

    /**
     * Приложение создаёт определённую фабрику в зависимости от конфигурации или
     * окружения.
     */
    static void configure() {
        if (System.getProperty("os.name").equals("Windows 10")) {
            creator = new ConcreteCreator1();
        } else {
            creator = new ConcreteCreator2();
        }
    }

    /**
     * Весь остальной клиентский код работает с фабрикой и продуктами только
     * через общий интерфейс, поэтому для него неважно какая фабрика была
     * создана.
     */
    static void runBusinessLogic() {
        creator.renderWindow();
    }
}

Алгоритм:
1) создаем интерфейс с абстрактными методами
public interface Product {
    void method1_product();
    void method2_product();
}
2) создаем классы, реализующие данный интерфейс, с разной логикой реализации абстрактных методов
public class ConcreteProduct1 extends Product {

    @Override
    public void methodOne4product() {
        // product 1 business logic
    }

    @Override
    public void methodTwo4product() {
        // product 1 business logic
    }
}

public class ConcreteProduct2 extends Product {

    @Override
    public void methodOne4product() {
        // product 2 business logic
    }

    @Override
    public void methodTwo4product() {
        // product 2 business logic
    }
}

3. Создаем абстрактный класс с абстрактным фабричным методом, возвращающим тип Product, в котором также может быть общая бизнес логика:
public abstract class Creator {
    public void commonLogic() {
        System.out.println("This is common business logic for both Product");
    }
    /**
     * Подклассы будут переопределять этот метод, чтобы создавать конкретные
     * объекты продуктов, разные для каждой фабрики.
     */
    public abstract Product createProduct();
}

4. Создаем подклассы, реализующие Creator, с реализацией методоа Creator, возвращающего свой экземпляр классов ConcreteProduct:
public class ConcreteCreator1 extends Creator {
    @Override
    public Product createProduct() {
        return new ConcreteCreator1();
    }
}

public class ConcreteCreator2 extends Creator {
    @Override
    public Product createProduct() {
        return new ConcreteCreator2();
    }
}

5. В основном потоке управления создаем логику выбора ConcreteCreator:
    static void configure() {
        if (System.getProperty("os.name").equals("Windows 10")) {
            creator = new ConcreteCreator1();
        } else {
            creator = new ConcreteCreator2();
        }
    }

6. На данном экземпляре creator вызываем методы бизнес-логики классов ConcreteProduct:
    static void runBusinessLogic() {
        creator.commonLogic(); // используем общую логику незваисимо от типа фабрики
        creator.createProduct().methodTwo4product(); // используем методы фабрики определенного типа
    }


Реализация
Рассмотрим следующие вопросы, возникающие при использовании паттерна фабричный метод:

две основных разновидности паттерна:
А)
(1) случай, когда класс Creator является абстрактным и не содержит реализации объявленного в нем фабричного метода, и
(2) Creator — конкретный класс, в котором по умолчанию есть реализация фабричного метода.
Редко, но встречается и абстрактный класс, имеющий реализацию по умолчанию.
В первом случае для определения реализации необходимы подклассы, поскольку никакой разумной реализации по умолчанию не существует.
При этом обходится проблема, связанная с необходимостью создания экземпляров заранее неизвестных классов.
Во втором случае конкретный класс Creator использует фабричный метод, главным образом ради повышения гибкости.
Происходящее соответствует правилу: «Создавай объекты в отдельной операции, чтобы подклассы могли подменить способ их создания».
Соблюдение этого правила гарантирует, что авторы подклассов смогут при необходимости изменить класс объектов,
экземпляры которых создаются их родителем;

B) параметризованные фабричные методы. Это еще один вариант паттерна, который позволяет фабричному методу
создавать разные виды продуктов. Фабричному методу передается параметр, который определяет вид создаваемого объекта.
Все объекты, получающиеся с помощью фабричного метода, разделяют общий интерфейс Product.
В примере с документами класс Application может поддерживать разные виды документов.
Вы передаете методу CreateDocument лишний параметр, который и определяет, документ какого вида нужно создать.