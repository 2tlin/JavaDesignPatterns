The Single Responsibility Rule

The BankProgram code is correct. But is it any good? Note that the program
has multiple areas of responsibility—for example, one responsibility is to
handle I/O processing and another responsibility is to manage account
information—and both responsibilities are handled by a single class.
Multipurpose classes violate the fundamental design principle. The
issue is that each area of responsibility will have different reasons for
changing. If these responsibilities are implemented by a single class then
the entire class will have to be modified whenever a change occurs to
one aspect of it. On the other hand, if each responsibility is assigned to a
different class then fewer parts of the program need be modified when a
change occurs.
This observation leads to a design rule known as the Single
Responsibility rule.

The Single Responsibility Rule:
A class should have a single purpose, and all its methods should be related to that purpose.

A program that satisfies the Single Responsibility rule will be organized
into classes, with each class having its own unique responsibility.
 */